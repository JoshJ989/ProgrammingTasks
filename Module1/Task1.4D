//More-Inputs-Timer Board - Task M1.T4D
//By:
//Josh J

//elements of timer interrupt code from SparkFun Electronics (2018). Level Up Your Arduino Code: Timer Interrupts. [online] Available at: https://youtu.be/2kr5A350H7E [Accessed 18 Jul. 2021].


//creates constant integer variables
const int hotTemp = 80;

const int coldTemp = 5;

const uint16_t tl_load = 0;

const uint16_t tl_comp = 65535;

//creates variables
int lightValue = 500;

int tooClose = 0;

int tooFar = 0;

int comfortableDistance = 0;

long distanceCm = 0;

long pingTime = 0;

bool ultraOnOff = false;


long distanceMeasurement(long timeInMicroseconds) {

  //calculation found from Deo (2018). Circuit design Ultrasonic distance sensor. [online] Available at: https://www.tinkercad.com/things/9AzmS567fJN-ultrasonic-distance-sensor [Accessed 18 Jul. 2021].
  return timeInMicroseconds / 29 / 2;
  
}  


void setup()
{
  pinMode(A0, INPUT); //temperature sensor
  pinMode(A1, INPUT); //photoresistor
  pinMode(4, OUTPUT);	//dc motor
  pinMode(5, OUTPUT);	//led red
  pinMode(6, OUTPUT); //led blue
  pinMode(7, OUTPUT); //temperature sensor interrupt led
  pinMode(8, OUTPUT); //photoresistor led
  pinMode(10, OUTPUT); //photoresistor interrupt led
  
  //timer interrupt setup
  DDRB |= (1 << PB5); 
  
  TCCR1A = 0;
  
  TCCR1B &= ~(1 << WGM13);
  TCCR1B |= (1 << WGM12);
   
  TCCR1B |= (1 << CS12);
  TCCR1B &= ~(1 << CS11);
  TCCR1B &= ~(1 << CS10);
  
  TCNT1 = tl_load;
  
  OCR1A = tl_comp;
  
  TIMSK1 = (1 << OCIE1A);
  
  	//pin change interrupt setup
	DDRD &= ~(1 << DDD2) | (1 << DDD3); //sets digital pin 2 and 3 as inputs

	PCICR |= (1 << PCIE2); //pin change interrupt 2

	
	PCMSK2 |= (1 << PCINT18) | (1 << PCINT19); //PCINT18 and PCINT19 (digital pins 2 and 3 on the Arduino)
  
  
  sei();
  
  Serial.begin(9600);
}

ISR(TIMER1_COMPA_vect) {
  Serial.println("TIMER INTERRUPT ACTIVATED");
    
  if (ultraOnOff == false) {
    PORTB ^= (1 << PB5);
    
    digitalWrite(7, LOW);
    
    
    tooClose = 100;
  
    tooFar = 300;

    comfortableDistance = 120; 

    
  	//ultrasonic distance sensor
    pinMode(9, OUTPUT);  
    digitalWrite(9, LOW);
    delayMicroseconds(1);
    digitalWrite(9, HIGH);
    delayMicroseconds(5);
    digitalWrite(9, LOW);
    pinMode(9, INPUT);
    pingTime = pulseIn(9, HIGH);
	
    distanceCm = distanceMeasurement(pingTime);
    
    
    if (distanceCm <= tooClose) {
      Serial.println("OBJECT IS TOO CLOSE");
    }
    else if (distanceCm >= comfortableDistance && distanceCm < tooFar) {
     
      Serial.println("OBJECT IS AT IDEAL DISTANCE");
    }
    else if (distanceCm >= tooFar) {
     
      Serial.println("OBJECT IS OUT OF RANGE");
    }
   
    digitalWrite(5, LOW);
  	digitalWrite(6, LOW);
    digitalWrite(8, LOW);
    digitalWrite(4, HIGH);
  }
  else
  {
    ultraOnOff = true;
  }
  
  
}


void loop()
{
 
    
}


ISR(PCINT2_vect) {
  if(PIND & _BV(PIND2))
  {
    //TEMPERATURE SENSOR CODE
    	int tempSense = analogRead(A0);	//sets the temperature sensor to the A0 port on the Arduino

      //calculations below inspired by Arduino Project Hub. (n.d.). Arduino LED Temperature Indicator. [online] Available at: https://create.arduino.cc/projecthub/luca-mcloughlin/arduino-led-temperature-indicator-6874d9 [Accessed 16 Jul. 2021].
      float tempVoltage = (tempSense / 1024.0) * 5.0;	//sets the value of the voltage
      float tempInCelsius = (tempVoltage - .5) * 100;	//calculates temperature in Celsius

      Serial.print("The temperature in Celsius is: ");	//prints the current temperature in celsius
      Serial.println(tempInCelsius);

      if (tempInCelsius <= coldTemp) {
        digitalWrite(4, HIGH); //makes dc motor spin at low speed
        digitalWrite(5, LOW); //turns red led off
        digitalWrite(6, HIGH); //turns blue led on
        Serial.println("COLD TEMPERATURE");
      }
      else if (tempInCelsius >= hotTemp) {
        digitalWrite(4, LOW); //makes dc motor spin at high speed
        digitalWrite(5, HIGH); //turns red led on
        digitalWrite(6, LOW); //turns blue led off
        Serial.println("HOT TEMPERATURE");
      }
      else if (tempInCelsius > coldTemp && tempInCelsius < hotTemp) {
        digitalWrite(4, HIGH); //makes dc motor spin at low speed
        digitalWrite(5, HIGH); //turns red led on
        digitalWrite(6, HIGH); //turns blue led on
        Serial.println("MEDIUM TEMPERATURE");
      }
      delay(100);
    }
    else
    {
      digitalWrite(7, HIGH); //turns interrupt led on
      digitalWrite(4, HIGH); //spins dc motor at low speed
      digitalWrite(5, LOW); //turns red led off
      digitalWrite(6, LOW); //turns blue led off

      Serial.println("The temperature sensor has been interrupted");
    }
  
	
  if(PIND & _BV(PIND3))
  {
    //LDR CODE
    	int photoSense = analogRead(A1); //sets the photoresistor sensor to the A1 port on the Arduino

      	digitalWrite(10, LOW);
          Serial.print("The resistance of the photoresistor is: "); //prints the current resistance recorded by the photoresistor
          Serial.println(photoSense);

          if (photoSense >= 500) {
            digitalWrite(8, HIGH);
          }
          else if (photoSense < 500)
          {
              digitalWrite(8, LOW);
          }
      delay(100); 
  }
  else
  {
  	digitalWrite(8, LOW);
    digitalWrite(5, LOW);
    digitalWrite(10, HIGH);
    Serial.println("The photoresistor function has been interrupted");
  }
}
